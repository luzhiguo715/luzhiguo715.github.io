function MapboxLanguage(options){options=Object.assign({},options);if(!(this instanceof MapboxLanguage)){throw new Error('MapboxLanguage needs to be called with the new keyword');}
this.setLanguage=this.setLanguage.bind(this);this._initialStyleUpdate=this._initialStyleUpdate.bind(this);this._defaultLanguage=options.defaultLanguage;this._isLanguageField=options.languageField||/^name_/;this._getLanguageField=options.getLanguageField||function nameField(language){return language==='mul'?'name':`name_${language}`;};this._languageSource=options.languageSource||null;this._languageTransform=options.languageTransform;this._excludedLayerIds=options.excludedLayerIds||[];this.supportedLanguages=options.supportedLanguages||['ar','de','en','es','fr','it','ja','ko','mul','pt','ru','vi','zh-Hans','zh-Hant'];}
const isTokenField=/^\{name/;function isFlatExpressionField(isLangField,property){const isGetExpression=Array.isArray(property)&&property[0]==='get';if(isGetExpression&&isTokenField.test(property[1])){console.warn('This plugin no longer supports the use of token syntax (e.g. {name}). Please use a get expression. See https://docs.mapbox.com/mapbox-gl-js/style-spec/expressions/ for more details.');}
return isGetExpression&&isLangField.test(property[1]);}
function adaptNestedExpressionField(isLangField,property,languageFieldName){if(Array.isArray(property)){for(let i=1;i<property.length;i++){if(Array.isArray(property[i])){if(isFlatExpressionField(isLangField,property[i])){property[i][1]=languageFieldName;}
adaptNestedExpressionField(isLangField,property[i],languageFieldName);}}}}
function adaptPropertyLanguage(isLangField,property,languageFieldName){if(isFlatExpressionField(isLangField,property)){property[1]=languageFieldName;}
adaptNestedExpressionField(isLangField,property,languageFieldName);if(property[0]==='get'&&property[1]==='name'){const defaultProp=property.slice();const adaptedProp=['get',languageFieldName];property=['coalesce',adaptedProp,defaultProp];}
return property;}
function changeLayerTextProperty(isLangField,layer,languageFieldName,excludedLayerIds){if(layer.layout&&layer.layout['text-field']&&excludedLayerIds.indexOf(layer.id)===-1){return Object.assign({},layer,{layout:Object.assign({},layer.layout,{'text-field':adaptPropertyLanguage(isLangField,layer.layout['text-field'],languageFieldName)})});}
return layer;}
function findStreetsSource(style){const sources=Object.keys(style.sources).filter((sourceName)=>{const url=style.sources[sourceName].url;return url&&url.indexOf('mapbox.mapbox-streets-v8')>-1||/mapbox-streets-v[1-9][1-9]/.test(url);});if(!sources.length)throw new Error('If using MapboxLanguage with a Mapbox style, the style must be based on vector tile version 8, e.g. "streets-v11"');return sources[0];}
MapboxLanguage.prototype.setLanguage=function(style,language){if(this.supportedLanguages.indexOf(language)<0)throw new Error(`Language ${ language } is not supported`);const streetsSource=this._languageSource||findStreetsSource(style);if(!streetsSource)return style;const field=this._getLanguageField(language);const isLangField=this._isLanguageField;const excludedLayerIds=this._excludedLayerIds;const changedLayers=style.layers.map((layer)=>{if(layer.source===streetsSource)return changeLayerTextProperty(isLangField,layer,field,excludedLayerIds);return layer;});const languageStyle=Object.assign({},style,{layers:changedLayers});return this._languageTransform?this._languageTransform(languageStyle,language):languageStyle;};MapboxLanguage.prototype._initialStyleUpdate=function(){const style=this._map.getStyle();const language=this._defaultLanguage||browserLanguage(this.supportedLanguages);this._map.setStyle(this.setLanguage(style,language));};function browserLanguage(supportedLanguages){const language=navigator.languages?navigator.languages[0]:(navigator.language||navigator.userLanguage);const parts=language&&language.split('-');let languageCode=language;if(parts.length>1){languageCode=parts[0];}
if(supportedLanguages.indexOf(languageCode)>-1){return languageCode;}
return null;}
MapboxLanguage.prototype.onAdd=function(map){this._map=map;this._map.on('style.load',this._initialStyleUpdate);this._container=document.createElement('div');return this._container;};MapboxLanguage.prototype.onRemove=function(){this._map.off('style.load',this._initialStyleUpdate);this._map=undefined;};if(typeof module!=='undefined'&&typeof module.exports!=='undefined'){module.exports=MapboxLanguage;}else{window.MapboxLanguage=MapboxLanguage;}